* YAPA (Yet Another Progress App)

** Description
Task: Simple Task management app (just backend, no frontend)

*** Application Setup
Create a Node.js application using TypeScript (you can but don't have to use Express)
Define RESTful endpoints to create, read, update, and delete (CRUD) tasks.
Use environment variables for configuration settings like database credentials.

*** Database Integration:
Set up a PostgreSQL database
Design a simple schema for the tasks for example: id (auto-incremented primary key), title (text), description (text), and status (text).

*** Docker Configuration
Write a Dockerfile for the Node.js application.
Create a docker-compose.yml file that defines two services:
The Node.js application.
The PostgreSQL database, initialized with the required schema.

*** GitHub Actions Pipeline:
Set up a GitHub repository for the project.
Configure a GitHub Actions workflow that performs the following steps:
Lints the code using ESLint.
Builds the Docker images.
*** Documentation
Include a README.md with instructions on how to build, run, and use the API.

*** Deliverables
A GitHub repository containing:
Node.js code with the defined RESTful API.
Dockerfile and docker-compose.yml for running the application with PostgreSQL.
GitHub Actions CI/CD configuration.
Any tests and linting configurations. (bonus points for tests :) )
README and other documentation as specified.

*** Evaluation Criteria
Functionality: The application must meet all the functional requirements.
Code Quality: Code should be clean, well-organized, and properly commented.
Docker Usage: Proper use of Dockerfile and docker-compose configurations.
DevOps Integration: Effective use of GitHub Actions for continuous integration and deployment processes.
Documentation: Clear and helpful documentation, including how to run the application and details on API endpoints.

Security ;)

Take your time and make it the best possible :)

** USAGE
*** Installation
1. Clone the git repo
2. Create and set your preferred credentials in the .env file
   An example file could look like this
   #+BEGIN_SRC bash
     DB_USER=admin
     DB_PASS=safepassword
     DB_HOST=postgres
     DB_PORT=5432
     DB_NAME=YAPA
   #+END_SRC
3. Run docker-compose build

  
This should be all that is necessary for the application to be fully functional.

Example setup would look like this:
   #+BEGIN_SRC bash
     git clone git@github.com:ILoveLinux666/Yapa.git
     cd Yapa
     # create .env file
     docker-compose build
   #+END_SRC
*** Running
The app can be run by executing docker-compose up in the project root directory.

*** API
The api has 5 endpoints
- /tasks
  Returns all tasks
- /task/ID
  Returns a specific task based on ID
- /task_update/ID
  Updates a task based on ID
- /task_create
  Creates a task
- /task_delete/ID
  Deletes a task based on ID

/tasks and /task_update expects three fields
  - header
  - content
  - state
    
#+begin_src bash
  # Returns all tasks
  curl http://127.0.0.1:3000/tasks
  # Returns a task with the given id
  curl http://127.0.0.1:3000/task/PUT_ID_HERE
  # Updates a task
  curl -X POST http://127.0.0.1:3000/task_update/PUT_ID_HERE -H "Content-Type: application/json" -d '{"header": "Example Name", "content": "Example Description", "state": "TODO"}'
  # Creates a task
  curl -X POST http://127.0.0.1:3000/task_create -H "Content-Type: application/json" -d '{"header": "Example Name", "content": "Example Description", "state": "TODO"}'
  # Delete a task
  curl -X DELETE http://127.0.0.1:3000/task_delete/PUT_ID_HERE
#+end_src
